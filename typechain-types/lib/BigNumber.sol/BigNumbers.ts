/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type BigNumberStruct = {
  val: BytesLike;
  neg: boolean;
  bitlen: BigNumberish;
};

export type BigNumberStructOutput = [
  val: string,
  neg: boolean,
  bitlen: bigint
] & { val: string; neg: boolean; bitlen: bigint };

export interface BigNumbersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_shr"
      | "_sub"
      | "add"
      | "bitLength((bytes,bool,uint256))"
      | "bitLength(bytes)"
      | "bitLength(uint256)"
      | "cmp"
      | "divVerify"
      | "eq"
      | "four"
      | "gt"
      | "gte"
      | "hash"
      | "init"
      | "init_"
      | "init__"
      | "isOdd"
      | "isZero((bytes,bool,uint256))"
      | "isZero(bytes)"
      | "lt"
      | "lte"
      | "mod"
      | "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))"
      | "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))"
      | "modinvVerify"
      | "modmul"
      | "mul"
      | "one"
      | "pow"
      | "shl"
      | "shr"
      | "sub"
      | "three"
      | "two"
      | "verify"
      | "zero"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_shr",
    values: [BigNumberStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_sub",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bitLength((bytes,bool,uint256))",
    values: [BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bitLength(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bitLength(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cmp",
    values: [BigNumberStruct, BigNumberStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "divVerify",
    values: [BigNumberStruct, BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "eq",
    values: [BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(functionFragment: "four", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gt",
    values: [BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "gte",
    values: [BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "init_",
    values: [BytesLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init__",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isOdd",
    values: [BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isZero((bytes,bool,uint256))",
    values: [BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isZero(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lt",
    values: [BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lte",
    values: [BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mod",
    values: [BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))",
    values: [BigNumberStruct, BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))",
    values: [BigNumberStruct, BigNumberStruct, BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modinvVerify",
    values: [BigNumberStruct, BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modmul",
    values: [BigNumberStruct, BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mul",
    values: [BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(functionFragment: "one", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pow",
    values: [BigNumberStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shl",
    values: [BigNumberStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shr",
    values: [BigNumberStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sub",
    values: [BigNumberStruct, BigNumberStruct]
  ): string;
  encodeFunctionData(functionFragment: "three", values?: undefined): string;
  encodeFunctionData(functionFragment: "two", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BigNumberStruct]
  ): string;
  encodeFunctionData(functionFragment: "zero", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_shr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_sub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bitLength((bytes,bool,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitLength(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitLength(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cmp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divVerify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eq", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "four", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init__", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOdd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isZero((bytes,bool,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isZero(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modinvVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "one", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "three", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "two", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zero", data: BytesLike): Result;
}

export interface BigNumbers extends BaseContract {
  connect(runner?: ContractRunner | null): BigNumbers;
  waitForDeployment(): Promise<this>;

  interface: BigNumbersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _shr: TypedContractMethod<
    [bn: BigNumberStruct, bits: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;

  _sub: TypedContractMethod<
    [max: BytesLike, min: BytesLike],
    [[string, bigint]],
    "view"
  >;

  add: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;

  "bitLength((bytes,bool,uint256))": TypedContractMethod<
    [a: BigNumberStruct],
    [bigint],
    "view"
  >;

  "bitLength(bytes)": TypedContractMethod<[a: BytesLike], [bigint], "view">;

  "bitLength(uint256)": TypedContractMethod<
    [a: BigNumberish],
    [bigint],
    "view"
  >;

  cmp: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct, signed: boolean],
    [bigint],
    "view"
  >;

  divVerify: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct, r: BigNumberStruct],
    [boolean],
    "view"
  >;

  eq: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;

  four: TypedContractMethod<[], [BigNumberStructOutput], "view">;

  gt: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;

  gte: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;

  hash: TypedContractMethod<[a: BigNumberStruct], [string], "view">;

  init: TypedContractMethod<
    [val: BigNumberish, neg: boolean],
    [BigNumberStructOutput],
    "view"
  >;

  init_: TypedContractMethod<
    [val: BytesLike, neg: boolean, bitlen: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;

  init__: TypedContractMethod<
    [val: BytesLike, neg: boolean],
    [BigNumberStructOutput],
    "view"
  >;

  isOdd: TypedContractMethod<[a: BigNumberStruct], [boolean], "view">;

  "isZero((bytes,bool,uint256))": TypedContractMethod<
    [a: BigNumberStruct],
    [boolean],
    "view"
  >;

  "isZero(bytes)": TypedContractMethod<[a: BytesLike], [boolean], "view">;

  lt: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;

  lte: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;

  mod: TypedContractMethod<
    [a: BigNumberStruct, n: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;

  "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))": TypedContractMethod<
    [a: BigNumberStruct, e: BigNumberStruct, n: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;

  "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))": TypedContractMethod<
    [
      a: BigNumberStruct,
      ai: BigNumberStruct,
      e: BigNumberStruct,
      n: BigNumberStruct
    ],
    [BigNumberStructOutput],
    "view"
  >;

  modinvVerify: TypedContractMethod<
    [a: BigNumberStruct, n: BigNumberStruct, r: BigNumberStruct],
    [boolean],
    "view"
  >;

  modmul: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct, n: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;

  mul: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;

  one: TypedContractMethod<[], [BigNumberStructOutput], "view">;

  pow: TypedContractMethod<
    [a: BigNumberStruct, e: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;

  shl: TypedContractMethod<
    [a: BigNumberStruct, bits: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;

  shr: TypedContractMethod<
    [a: BigNumberStruct, bits: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;

  sub: TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;

  three: TypedContractMethod<[], [BigNumberStructOutput], "view">;

  two: TypedContractMethod<[], [BigNumberStructOutput], "view">;

  verify: TypedContractMethod<[bn: BigNumberStruct], [void], "view">;

  zero: TypedContractMethod<[], [BigNumberStructOutput], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_shr"
  ): TypedContractMethod<
    [bn: BigNumberStruct, bits: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "_sub"
  ): TypedContractMethod<
    [max: BytesLike, min: BytesLike],
    [[string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "bitLength((bytes,bool,uint256))"
  ): TypedContractMethod<[a: BigNumberStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "bitLength(bytes)"
  ): TypedContractMethod<[a: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bitLength(uint256)"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "cmp"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct, signed: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "divVerify"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct, r: BigNumberStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "eq"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "four"
  ): TypedContractMethod<[], [BigNumberStructOutput], "view">;
  getFunction(
    nameOrSignature: "gt"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "gte"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash"
  ): TypedContractMethod<[a: BigNumberStruct], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [val: BigNumberish, neg: boolean],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "init_"
  ): TypedContractMethod<
    [val: BytesLike, neg: boolean, bitlen: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "init__"
  ): TypedContractMethod<
    [val: BytesLike, neg: boolean],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOdd"
  ): TypedContractMethod<[a: BigNumberStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "isZero((bytes,bool,uint256))"
  ): TypedContractMethod<[a: BigNumberStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "isZero(bytes)"
  ): TypedContractMethod<[a: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lt"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lte"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mod"
  ): TypedContractMethod<
    [a: BigNumberStruct, n: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))"
  ): TypedContractMethod<
    [a: BigNumberStruct, e: BigNumberStruct, n: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "modexp((bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256),(bytes,bool,uint256))"
  ): TypedContractMethod<
    [
      a: BigNumberStruct,
      ai: BigNumberStruct,
      e: BigNumberStruct,
      n: BigNumberStruct
    ],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "modinvVerify"
  ): TypedContractMethod<
    [a: BigNumberStruct, n: BigNumberStruct, r: BigNumberStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "modmul"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct, n: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "mul"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "one"
  ): TypedContractMethod<[], [BigNumberStructOutput], "view">;
  getFunction(
    nameOrSignature: "pow"
  ): TypedContractMethod<
    [a: BigNumberStruct, e: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "shl"
  ): TypedContractMethod<
    [a: BigNumberStruct, bits: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "shr"
  ): TypedContractMethod<
    [a: BigNumberStruct, bits: BigNumberish],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "sub"
  ): TypedContractMethod<
    [a: BigNumberStruct, b: BigNumberStruct],
    [BigNumberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "three"
  ): TypedContractMethod<[], [BigNumberStructOutput], "view">;
  getFunction(
    nameOrSignature: "two"
  ): TypedContractMethod<[], [BigNumberStructOutput], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<[bn: BigNumberStruct], [void], "view">;
  getFunction(
    nameOrSignature: "zero"
  ): TypedContractMethod<[], [BigNumberStructOutput], "view">;

  filters: {};
}
