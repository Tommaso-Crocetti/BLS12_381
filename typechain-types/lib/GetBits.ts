/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type BigNumberStruct = {
  val: BytesLike;
  neg: boolean;
  bitlen: BigNumberish;
};

export type BigNumberStructOutput = [
  val: string,
  neg: boolean,
  bitlen: bigint
] & { val: string; neg: boolean; bitlen: bigint };

export interface GetBitsInterface extends Interface {
  getFunction(nameOrSignature: "getBits" | "get_millerBits"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBits",
    values: [BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "get_millerBits",
    values: [BigNumberStruct]
  ): string;

  decodeFunctionResult(functionFragment: "getBits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_millerBits",
    data: BytesLike
  ): Result;
}

export interface GetBits extends BaseContract {
  connect(runner?: ContractRunner | null): GetBits;
  waitForDeployment(): Promise<this>;

  interface: GetBitsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBits: TypedContractMethod<[value: BigNumberStruct], [boolean[]], "view">;

  get_millerBits: TypedContractMethod<
    [value: BigNumberStruct],
    [boolean[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBits"
  ): TypedContractMethod<[value: BigNumberStruct], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "get_millerBits"
  ): TypedContractMethod<[value: BigNumberStruct], [boolean[]], "view">;

  filters: {};
}
