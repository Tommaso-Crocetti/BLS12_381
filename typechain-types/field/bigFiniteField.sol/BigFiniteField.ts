/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type BigNumberStruct = {
  val: BytesLike;
  neg: boolean;
  bitlen: BigNumberish;
};

export type BigNumberStructOutput = [
  val: string,
  neg: boolean,
  bitlen: bigint
] & { val: string; neg: boolean; bitlen: bigint };

export type ZpStruct = { value: BigNumberStruct };

export type ZpStructOutput = [value: BigNumberStructOutput] & {
  value: BigNumberStructOutput;
};

export interface BigFiniteFieldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createElement"
      | "div"
      | "equals"
      | "four"
      | "get_p"
      | "inverse"
      | "mul"
      | "mul_nonres"
      | "one"
      | "sub"
      | "sum"
      | "three"
      | "two"
      | "zero"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createElement",
    values: [BigNumberStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "div",
    values: [ZpStruct, ZpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "equals",
    values: [ZpStruct, ZpStruct]
  ): string;
  encodeFunctionData(functionFragment: "four", values?: undefined): string;
  encodeFunctionData(functionFragment: "get_p", values?: undefined): string;
  encodeFunctionData(functionFragment: "inverse", values: [ZpStruct]): string;
  encodeFunctionData(
    functionFragment: "mul",
    values: [ZpStruct, ZpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_nonres",
    values: [ZpStruct]
  ): string;
  encodeFunctionData(functionFragment: "one", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sub",
    values: [ZpStruct, ZpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sum",
    values: [ZpStruct, ZpStruct]
  ): string;
  encodeFunctionData(functionFragment: "three", values?: undefined): string;
  encodeFunctionData(functionFragment: "two", values?: undefined): string;
  encodeFunctionData(functionFragment: "zero", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createElement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "div", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "equals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "four", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_p", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inverse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul_nonres", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "one", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "three", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "two", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zero", data: BytesLike): Result;
}

export interface BigFiniteField extends BaseContract {
  connect(runner?: ContractRunner | null): BigFiniteField;
  waitForDeployment(): Promise<this>;

  interface: BigFiniteFieldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createElement: TypedContractMethod<
    [value: BigNumberStruct],
    [ZpStructOutput],
    "view"
  >;

  div: TypedContractMethod<
    [x: ZpStruct, y: ZpStruct],
    [ZpStructOutput],
    "view"
  >;

  equals: TypedContractMethod<[x: ZpStruct, y: ZpStruct], [boolean], "view">;

  four: TypedContractMethod<[], [ZpStructOutput], "view">;

  get_p: TypedContractMethod<[], [BigNumberStructOutput], "view">;

  inverse: TypedContractMethod<[x: ZpStruct], [ZpStructOutput], "view">;

  mul: TypedContractMethod<
    [x: ZpStruct, y: ZpStruct],
    [ZpStructOutput],
    "view"
  >;

  mul_nonres: TypedContractMethod<[x: ZpStruct], [ZpStructOutput], "view">;

  one: TypedContractMethod<[], [ZpStructOutput], "view">;

  sub: TypedContractMethod<
    [x: ZpStruct, y: ZpStruct],
    [ZpStructOutput],
    "view"
  >;

  sum: TypedContractMethod<
    [x: ZpStruct, y: ZpStruct],
    [ZpStructOutput],
    "view"
  >;

  three: TypedContractMethod<[], [ZpStructOutput], "view">;

  two: TypedContractMethod<[], [ZpStructOutput], "view">;

  zero: TypedContractMethod<[], [ZpStructOutput], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createElement"
  ): TypedContractMethod<[value: BigNumberStruct], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "div"
  ): TypedContractMethod<[x: ZpStruct, y: ZpStruct], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "equals"
  ): TypedContractMethod<[x: ZpStruct, y: ZpStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "four"
  ): TypedContractMethod<[], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "get_p"
  ): TypedContractMethod<[], [BigNumberStructOutput], "view">;
  getFunction(
    nameOrSignature: "inverse"
  ): TypedContractMethod<[x: ZpStruct], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "mul"
  ): TypedContractMethod<[x: ZpStruct, y: ZpStruct], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "mul_nonres"
  ): TypedContractMethod<[x: ZpStruct], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "one"
  ): TypedContractMethod<[], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "sub"
  ): TypedContractMethod<[x: ZpStruct, y: ZpStruct], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "sum"
  ): TypedContractMethod<[x: ZpStruct, y: ZpStruct], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "three"
  ): TypedContractMethod<[], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "two"
  ): TypedContractMethod<[], [ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "zero"
  ): TypedContractMethod<[], [ZpStructOutput], "view">;

  filters: {};
}
