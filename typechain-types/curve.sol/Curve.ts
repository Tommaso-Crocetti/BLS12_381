/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type BigNumberStruct = {
  val: BytesLike;
  neg: boolean;
  bitlen: BigNumberish;
};

export type BigNumberStructOutput = [
  val: string,
  neg: boolean,
  bitlen: bigint
] & { val: string; neg: boolean; bitlen: bigint };

export type ZpStruct = { value: BigNumberStruct };

export type ZpStructOutput = [value: BigNumberStructOutput] & {
  value: BigNumberStructOutput;
};

export type Point_ZpStruct = {
  pointType: BigNumberish;
  x: ZpStruct;
  y: ZpStruct;
};

export type Point_ZpStructOutput = [
  pointType: bigint,
  x: ZpStructOutput,
  y: ZpStructOutput
] & { pointType: bigint; x: ZpStructOutput; y: ZpStructOutput };

export type Zp_2Struct = { a: ZpStruct; b: ZpStruct };

export type Zp_2StructOutput = [a: ZpStructOutput, b: ZpStructOutput] & {
  a: ZpStructOutput;
  b: ZpStructOutput;
};

export type Point_Zp_2Struct = {
  pointType: BigNumberish;
  x: Zp_2Struct;
  y: Zp_2Struct;
};

export type Point_Zp_2StructOutput = [
  pointType: bigint,
  x: Zp_2StructOutput,
  y: Zp_2StructOutput
] & { pointType: bigint; x: Zp_2StructOutput; y: Zp_2StructOutput };

export type Zp_6Struct = { a: Zp_2Struct; b: Zp_2Struct; c: Zp_2Struct };

export type Zp_6StructOutput = [
  a: Zp_2StructOutput,
  b: Zp_2StructOutput,
  c: Zp_2StructOutput
] & { a: Zp_2StructOutput; b: Zp_2StructOutput; c: Zp_2StructOutput };

export type Zp_12Struct = { a: Zp_6Struct; b: Zp_6Struct };

export type Zp_12StructOutput = [a: Zp_6StructOutput, b: Zp_6StructOutput] & {
  a: Zp_6StructOutput;
  b: Zp_6StructOutput;
};

export type Point_Zp_12Struct = {
  pointType: BigNumberish;
  x: Zp_12Struct;
  y: Zp_12Struct;
};

export type Point_Zp_12StructOutput = [
  pointType: bigint,
  x: Zp_12StructOutput,
  y: Zp_12StructOutput
] & { pointType: bigint; x: Zp_12StructOutput; y: Zp_12StructOutput };

export interface CurveInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Subgroup_0Check"
      | "Subgroup_1Check"
      | "_addEval"
      | "addEval"
      | "doubleEval"
      | "get_g0"
      | "get_g1"
      | "get_order"
      | "get_prime"
      | "isOnCurve"
      | "isOnCurveTwist"
      | "isOnCurve_12"
      | "miller"
      | "miller_iterate"
      | "pairing"
      | "untwist"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Subgroup_0Check",
    values: [Point_ZpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "Subgroup_1Check",
    values: [Point_Zp_2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "_addEval",
    values: [Point_Zp_12Struct, Point_Zp_12Struct, Point_ZpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addEval",
    values: [Point_Zp_2Struct, Point_Zp_2Struct, Point_ZpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "doubleEval",
    values: [Point_Zp_2Struct, Point_ZpStruct]
  ): string;
  encodeFunctionData(functionFragment: "get_g0", values?: undefined): string;
  encodeFunctionData(functionFragment: "get_g1", values?: undefined): string;
  encodeFunctionData(functionFragment: "get_order", values?: undefined): string;
  encodeFunctionData(functionFragment: "get_prime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOnCurve",
    values: [Point_ZpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnCurveTwist",
    values: [Point_Zp_2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnCurve_12",
    values: [Point_Zp_12Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "miller",
    values: [Point_ZpStruct, Point_Zp_2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "miller_iterate",
    values: [Point_ZpStruct, Point_Zp_2Struct, Point_Zp_2Struct, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pairing",
    values: [Point_ZpStruct, Point_Zp_2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "untwist",
    values: [Point_Zp_2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [Point_ZpStruct, Point_Zp_2Struct, Point_Zp_2Struct]
  ): string;

  decodeFunctionResult(
    functionFragment: "Subgroup_0Check",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Subgroup_1Check",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_addEval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addEval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doubleEval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_g0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_g1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_order", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_prime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOnCurve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOnCurveTwist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOnCurve_12",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "miller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miller_iterate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "untwist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export interface Curve extends BaseContract {
  connect(runner?: ContractRunner | null): Curve;
  waitForDeployment(): Promise<this>;

  interface: CurveInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Subgroup_0Check: TypedContractMethod<
    [point: Point_ZpStruct],
    [boolean],
    "view"
  >;

  Subgroup_1Check: TypedContractMethod<
    [point: Point_Zp_2Struct],
    [boolean],
    "view"
  >;

  _addEval: TypedContractMethod<
    [r: Point_Zp_12Struct, q: Point_Zp_12Struct, p: Point_ZpStruct],
    [Zp_12StructOutput],
    "view"
  >;

  addEval: TypedContractMethod<
    [r: Point_Zp_2Struct, q: Point_Zp_2Struct, p: Point_ZpStruct],
    [Zp_12StructOutput],
    "view"
  >;

  doubleEval: TypedContractMethod<
    [r: Point_Zp_2Struct, p: Point_ZpStruct],
    [Zp_12StructOutput],
    "view"
  >;

  get_g0: TypedContractMethod<[], [Point_ZpStructOutput], "view">;

  get_g1: TypedContractMethod<[], [Point_Zp_2StructOutput], "view">;

  get_order: TypedContractMethod<[], [BigNumberStructOutput], "view">;

  get_prime: TypedContractMethod<[], [BigNumberStructOutput], "view">;

  isOnCurve: TypedContractMethod<[point: Point_ZpStruct], [boolean], "view">;

  isOnCurveTwist: TypedContractMethod<
    [point: Point_Zp_2Struct],
    [boolean],
    "view"
  >;

  isOnCurve_12: TypedContractMethod<
    [point: Point_Zp_12Struct],
    [boolean],
    "view"
  >;

  miller: TypedContractMethod<
    [p: Point_ZpStruct, q: Point_Zp_2Struct],
    [Zp_12StructOutput],
    "view"
  >;

  miller_iterate: TypedContractMethod<
    [
      p: Point_ZpStruct,
      q: Point_Zp_2Struct,
      r: Point_Zp_2Struct,
      bits: boolean[]
    ],
    [Zp_12StructOutput],
    "view"
  >;

  pairing: TypedContractMethod<
    [p: Point_ZpStruct, q: Point_Zp_2Struct],
    [Zp_12StructOutput],
    "view"
  >;

  untwist: TypedContractMethod<
    [point: Point_Zp_2Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;

  verify: TypedContractMethod<
    [pk: Point_ZpStruct, hash: Point_Zp_2Struct, sig: Point_Zp_2Struct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Subgroup_0Check"
  ): TypedContractMethod<[point: Point_ZpStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "Subgroup_1Check"
  ): TypedContractMethod<[point: Point_Zp_2Struct], [boolean], "view">;
  getFunction(
    nameOrSignature: "_addEval"
  ): TypedContractMethod<
    [r: Point_Zp_12Struct, q: Point_Zp_12Struct, p: Point_ZpStruct],
    [Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "addEval"
  ): TypedContractMethod<
    [r: Point_Zp_2Struct, q: Point_Zp_2Struct, p: Point_ZpStruct],
    [Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "doubleEval"
  ): TypedContractMethod<
    [r: Point_Zp_2Struct, p: Point_ZpStruct],
    [Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_g0"
  ): TypedContractMethod<[], [Point_ZpStructOutput], "view">;
  getFunction(
    nameOrSignature: "get_g1"
  ): TypedContractMethod<[], [Point_Zp_2StructOutput], "view">;
  getFunction(
    nameOrSignature: "get_order"
  ): TypedContractMethod<[], [BigNumberStructOutput], "view">;
  getFunction(
    nameOrSignature: "get_prime"
  ): TypedContractMethod<[], [BigNumberStructOutput], "view">;
  getFunction(
    nameOrSignature: "isOnCurve"
  ): TypedContractMethod<[point: Point_ZpStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOnCurveTwist"
  ): TypedContractMethod<[point: Point_Zp_2Struct], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOnCurve_12"
  ): TypedContractMethod<[point: Point_Zp_12Struct], [boolean], "view">;
  getFunction(
    nameOrSignature: "miller"
  ): TypedContractMethod<
    [p: Point_ZpStruct, q: Point_Zp_2Struct],
    [Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "miller_iterate"
  ): TypedContractMethod<
    [
      p: Point_ZpStruct,
      q: Point_Zp_2Struct,
      r: Point_Zp_2Struct,
      bits: boolean[]
    ],
    [Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pairing"
  ): TypedContractMethod<
    [p: Point_ZpStruct, q: Point_Zp_2Struct],
    [Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "untwist"
  ): TypedContractMethod<
    [point: Point_Zp_2Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [pk: Point_ZpStruct, hash: Point_Zp_2Struct, sig: Point_Zp_2Struct],
    [boolean],
    "view"
  >;

  filters: {};
}
