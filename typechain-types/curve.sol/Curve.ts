/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ZpStruct = { value: BigNumberish };

export type ZpStructOutput = [value: bigint] & { value: bigint };

export type Zp_2Struct = { a: ZpStruct; b: ZpStruct };

export type Zp_2StructOutput = [a: ZpStructOutput, b: ZpStructOutput] & {
  a: ZpStructOutput;
  b: ZpStructOutput;
};

export type Zp_6Struct = { a: Zp_2Struct; b: Zp_2Struct; c: Zp_2Struct };

export type Zp_6StructOutput = [
  a: Zp_2StructOutput,
  b: Zp_2StructOutput,
  c: Zp_2StructOutput
] & { a: Zp_2StructOutput; b: Zp_2StructOutput; c: Zp_2StructOutput };

export type Zp_12Struct = { a: Zp_6Struct; b: Zp_6Struct };

export type Zp_12StructOutput = [a: Zp_6StructOutput, b: Zp_6StructOutput] & {
  a: Zp_6StructOutput;
  b: Zp_6StructOutput;
};

export declare namespace Curve {
  export type Point_0Struct = {
    pointType: BigNumberish;
    x: ZpStruct;
    y: ZpStruct;
  };

  export type Point_0StructOutput = [
    pointType: bigint,
    x: ZpStructOutput,
    y: ZpStructOutput
  ] & { pointType: bigint; x: ZpStructOutput; y: ZpStructOutput };

  export type Point_1Struct = {
    pointType: BigNumberish;
    x: Zp_2Struct;
    y: Zp_2Struct;
  };

  export type Point_1StructOutput = [
    pointType: bigint,
    x: Zp_2StructOutput,
    y: Zp_2StructOutput
  ] & { pointType: bigint; x: Zp_2StructOutput; y: Zp_2StructOutput };

  export type Point_2Struct = {
    pointType: BigNumberish;
    x: Zp_12Struct;
    y: Zp_12Struct;
  };

  export type Point_2StructOutput = [
    pointType: bigint,
    x: Zp_12StructOutput,
    y: Zp_12StructOutput
  ] & { pointType: bigint; x: Zp_12StructOutput; y: Zp_12StructOutput };
}

export interface CurveInterface extends Interface {
  getFunction(
    nameOrSignature: "isOnCurve_0" | "isOnCurve_1" | "untwist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isOnCurve_0",
    values: [AddressLike, Curve.Point_0Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnCurve_1",
    values: [AddressLike, Curve.Point_1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "untwist",
    values: [Curve.Point_1Struct]
  ): string;

  decodeFunctionResult(
    functionFragment: "isOnCurve_0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOnCurve_1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "untwist", data: BytesLike): Result;
}

export interface Curve extends BaseContract {
  connect(runner?: ContractRunner | null): Curve;
  waitForDeployment(): Promise<this>;

  interface: CurveInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isOnCurve_0: TypedContractMethod<
    [f: AddressLike, p: Curve.Point_0Struct],
    [boolean],
    "view"
  >;

  isOnCurve_1: TypedContractMethod<
    [q: AddressLike, p: Curve.Point_1Struct],
    [boolean],
    "view"
  >;

  untwist: TypedContractMethod<
    [p: Curve.Point_1Struct],
    [Curve.Point_2StructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isOnCurve_0"
  ): TypedContractMethod<
    [f: AddressLike, p: Curve.Point_0Struct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOnCurve_1"
  ): TypedContractMethod<
    [q: AddressLike, p: Curve.Point_1Struct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "untwist"
  ): TypedContractMethod<
    [p: Curve.Point_1Struct],
    [Curve.Point_2StructOutput],
    "view"
  >;

  filters: {};
}
