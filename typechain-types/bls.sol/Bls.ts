/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BlsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aggregateKeys"
      | "aggregateSignature"
      | "keyGen"
      | "sign"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregateKeys",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateSignature",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "keyGen", values?: undefined): string;
  encodeFunctionData(functionFragment: "sign", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregateKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyGen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export interface Bls extends BaseContract {
  connect(runner?: ContractRunner | null): Bls;
  waitForDeployment(): Promise<this>;

  interface: BlsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aggregateKeys: TypedContractMethod<
    [_keys: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  aggregateSignature: TypedContractMethod<
    [_sigs: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  keyGen: TypedContractMethod<[], [string], "nonpayable">;

  sign: TypedContractMethod<[_hash: BigNumberish], [bigint], "nonpayable">;

  verify: TypedContractMethod<
    [_sig: BigNumberish, _hash: BigNumberish, _pk: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aggregateKeys"
  ): TypedContractMethod<[_keys: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "aggregateSignature"
  ): TypedContractMethod<[_sigs: BigNumberish[]], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "keyGen"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "sign"
  ): TypedContractMethod<[_hash: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [_sig: BigNumberish, _hash: BigNumberish, _pk: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
