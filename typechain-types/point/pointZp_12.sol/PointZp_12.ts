/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type BigNumberStruct = {
  val: BytesLike;
  neg: boolean;
  bitlen: BigNumberish;
};

export type BigNumberStructOutput = [
  val: string,
  neg: boolean,
  bitlen: bigint
] & { val: string; neg: boolean; bitlen: bigint };

export type ZpStruct = { value: BigNumberStruct };

export type ZpStructOutput = [value: BigNumberStructOutput] & {
  value: BigNumberStructOutput;
};

export type Zp_2Struct = { a: ZpStruct; b: ZpStruct };

export type Zp_2StructOutput = [a: ZpStructOutput, b: ZpStructOutput] & {
  a: ZpStructOutput;
  b: ZpStructOutput;
};

export type Zp_6Struct = { a: Zp_2Struct; b: Zp_2Struct; c: Zp_2Struct };

export type Zp_6StructOutput = [
  a: Zp_2StructOutput,
  b: Zp_2StructOutput,
  c: Zp_2StructOutput
] & { a: Zp_2StructOutput; b: Zp_2StructOutput; c: Zp_2StructOutput };

export type Zp_12Struct = { a: Zp_6Struct; b: Zp_6Struct };

export type Zp_12StructOutput = [a: Zp_6StructOutput, b: Zp_6StructOutput] & {
  a: Zp_6StructOutput;
  b: Zp_6StructOutput;
};

export type Point_Zp_12Struct = {
  pointType: BigNumberish;
  x: Zp_12Struct;
  y: Zp_12Struct;
};

export type Point_Zp_12StructOutput = [
  pointType: bigint,
  x: Zp_12StructOutput,
  y: Zp_12StructOutput
] & { pointType: bigint; x: Zp_12StructOutput; y: Zp_12StructOutput };

export interface PointZp_12Interface extends Interface {
  getFunction(
    nameOrSignature: "add" | "double" | "multiply" | "negate" | "newPoint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [Point_Zp_12Struct, Point_Zp_12Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "double",
    values: [Point_Zp_12Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "multiply",
    values: [BigNumberStruct, Point_Zp_12Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "negate",
    values: [Point_Zp_12Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "newPoint",
    values: [BigNumberish, Zp_12Struct, Zp_12Struct]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "double", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "negate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newPoint", data: BytesLike): Result;
}

export interface PointZp_12 extends BaseContract {
  connect(runner?: ContractRunner | null): PointZp_12;
  waitForDeployment(): Promise<this>;

  interface: PointZp_12Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<
    [self: Point_Zp_12Struct, other: Point_Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;

  double: TypedContractMethod<
    [self: Point_Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;

  multiply: TypedContractMethod<
    [k: BigNumberStruct, self: Point_Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;

  negate: TypedContractMethod<
    [self: Point_Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;

  newPoint: TypedContractMethod<
    [pointType: BigNumberish, x: Zp_12Struct, y: Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [self: Point_Zp_12Struct, other: Point_Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "double"
  ): TypedContractMethod<
    [self: Point_Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "multiply"
  ): TypedContractMethod<
    [k: BigNumberStruct, self: Point_Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "negate"
  ): TypedContractMethod<
    [self: Point_Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "newPoint"
  ): TypedContractMethod<
    [pointType: BigNumberish, x: Zp_12Struct, y: Zp_12Struct],
    [Point_Zp_12StructOutput],
    "view"
  >;

  filters: {};
}
