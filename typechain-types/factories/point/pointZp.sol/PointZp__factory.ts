/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  PointZp,
  PointZpInterface,
} from "../../../point/pointZp.sol/PointZp";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract BigFiniteField",
        name: "field",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "other",
        type: "tuple",
      },
    ],
    name: "add",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "b",
        type: "tuple",
      },
    ],
    name: "compare",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
    ],
    name: "double",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "val",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "neg",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "bitlen",
            type: "uint256",
          },
        ],
        internalType: "struct BigNumber",
        name: "value",
        type: "tuple",
      },
    ],
    name: "getBits",
    outputs: [
      {
        internalType: "bool[]",
        name: "",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "val",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "neg",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "bitlen",
            type: "uint256",
          },
        ],
        internalType: "struct BigNumber",
        name: "k",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
    ],
    name: "multiply",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "val",
                type: "bytes",
              },
              {
                internalType: "bool",
                name: "neg",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "bitlen",
                type: "uint256",
              },
            ],
            internalType: "struct BigNumber",
            name: "value",
            type: "tuple",
          },
        ],
        internalType: "struct Zp",
        name: "x",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "val",
                type: "bytes",
              },
              {
                internalType: "bool",
                name: "neg",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "bitlen",
                type: "uint256",
              },
            ],
            internalType: "struct BigNumber",
            name: "value",
            type: "tuple",
          },
        ],
        internalType: "struct Zp",
        name: "y",
        type: "tuple",
      },
    ],
    name: "newPoint",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "point_at_infinity",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051612c44380380612c44833981810160405281019061003291906100ed565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b60006100ba8261009d565b9050919050565b6100ca816100af565b81146100d557600080fd5b50565b6000815190506100e7816100c1565b92915050565b60006020828403121561010357610102610078565b5b6000610111848285016100d8565b91505092915050565b612b1b806101296000396000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c80632651909a1161005b5780632651909a14610111578063292310eb146101415780636cee5a0b1461015f578063899c22981461018f5761007c565b80627995931461008157806307951d69146100b15780631953a9bf146100e1575b600080fd5b61009b600480360381019061009691906120d5565b6101bf565b6040516100a89190612332565b60405180910390f35b6100cb60048036038101906100c69190612354565b610281565b6040516100d89190612332565b60405180910390f35b6100fb60048036038101906100f691906123cc565b610c47565b6040516101089190612332565b60405180910390f35b61012b60048036038101906101269190612444565b610c85565b604051610138919061253c565b60405180910390f35b610149610fc4565b6040516101569190612332565b60405180910390f35b6101796004803603810190610174919061255e565b611124565b6040516101869190612332565b60405180910390f35b6101a960048036038101906101a49190612354565b611aba565b6040516101b691906125b6565b60405180910390f35b6101c7611cef565b6000151583602001511515146101dc57600080fd5b60006101e6610fc4565b9050600083905060006101f886610c85565b90508060008151811061020e5761020d6125d1565b5b60200260200101511561021f578192505b6000600190505b81518110156102745761023883611124565b925081818151811061024d5761024c6125d1565b5b602002602001015115610267576102648484610281565b93505b8080600101915050610226565b5082935050505092915050565b610289611cef565b60018081111561029c5761029b61214d565b5b836000015160018111156102b3576102b261214d565b5b036102c057819050610c41565b6001808111156102d3576102d261214d565b5b826000015160018111156102ea576102e961214d565b5b036102f757829050610c41565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846020015184602001516040518363ffffffff1660e01b815260040161035a92919061262a565b602060405180830381865afa158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b9190612676565b8015610447575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846040015184604001516040518363ffffffff1660e01b815260040161040592919061262a565b602060405180830381865afa158015610422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104469190612676565b5b1561045c5761045583611124565b9050610c41565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846020015184602001516040518363ffffffff1660e01b81526004016104bf92919061262a565b602060405180830381865afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190612676565b80156105ad575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846040015184604001516040518363ffffffff1660e01b815260040161056a92919061262a565b602060405180830381865afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190612676565b155b156105c1576105ba610fc4565b9050610c41565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad866040015188604001516040518363ffffffff1660e01b815260040161066392919061262a565b600060405180830381865afa158015610680573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106a99190612800565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a672d10060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad89602001518b602001516040518363ffffffff1660e01b815260040161074892919061262a565b600060405180830381865afa158015610765573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061078e9190612800565b6040518263ffffffff1660e01b81526004016107aa9190612849565b600060405180830381865afa1580156107c7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107f09190612800565b6040518363ffffffff1660e01b815260040161080d92919061262a565b600060405180830381865afa15801561082a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108539190612800565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832587886040518363ffffffff1660e01b815260040161092b92919061262a565b600060405180830381865afa158015610948573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109719190612800565b89602001516040518363ffffffff1660e01b815260040161099392919061262a565b600060405180830381865afa1580156109b0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109d99190612800565b86602001516040518363ffffffff1660e01b81526004016109fb92919061262a565b600060405180830381865afa158015610a18573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a419190612800565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad8b60200151886040518363ffffffff1660e01b8152600401610b1d92919061262a565b600060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b639190612800565b876040518363ffffffff1660e01b8152600401610b8192919061262a565b600060405180830381865afa158015610b9e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bc79190612800565b88604001516040518363ffffffff1660e01b8152600401610be992919061262a565b600060405180830381865afa158015610c06573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c2f9190612800565b9050610c3b8282610c47565b93505050505b92915050565b610c4f611cef565b604051806060016040528060006001811115610c6e57610c6d61214d565b5b815260200184815260200183815250905092915050565b6060600080836040015167ffffffffffffffff811115610ca857610ca7611d94565b5b604051908082528060200260200182016040528015610cd65781602001602082028036833780820191505090505b5090505b73__$7db5d2dbc3ae63372df6c39d501ad0f72a$__63aa7312f68573__$7db5d2dbc3ae63372df6c39d501ad0f72a$__63bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865af4158015610d3e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d67919061286b565b6040518363ffffffff1660e01b8152600401610d8492919061296c565b602060405180830381865af4158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc59190612676565b15610efc5773__$7db5d2dbc3ae63372df6c39d501ad0f72a$__63ee4a4e4e856040518263ffffffff1660e01b8152600401610e0191906129a3565b602060405180830381865af4158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190612676565b818381518110610e5557610e546125d1565b5b60200260200101901515908115158152505073__$7db5d2dbc3ae63372df6c39d501ad0f72a$__636efac6c78560016040518363ffffffff1660e01b8152600401610ea1929190612a0a565b600060405180830381865af4158015610ebe573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ee7919061286b565b93508180610ef490612a69565b925050610cda565b60008267ffffffffffffffff811115610f1857610f17611d94565b5b604051908082528060200260200182016040528015610f465781602001602082028036833780820191505090505b50905060005b83811015610fb8578260018286610f639190612ab1565b610f6d9190612ab1565b81518110610f7e57610f7d6125d1565b5b6020026020010151828281518110610f9957610f986125d1565b5b6020026020010190151590811515815250508080600101915050610f4c565b50809350505050919050565b610fcc611cef565b6040518060600160405280600180811115610fea57610fe961214d565b5b815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561105a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110839190612800565b815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110f3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061111c9190612800565b815250905090565b61112c611cef565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554836040015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156111d8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112019190612800565b6040518363ffffffff1660e01b815260040161121e92919061262a565b602060405180830381865afa15801561123b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125f9190612676565b156112735761126c610fc4565b9050611ab5565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345caa1176040518163ffffffff1660e01b8152600401600060405180830381865afa158015611359573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113829190612800565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832589602001518a602001516040518363ffffffff1660e01b81526004016113e592919061262a565b600060405180830381865afa158015611402573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061142b9190612800565b6040518363ffffffff1660e01b815260040161144892919061262a565b600060405180830381865afa158015611465573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061148e9190612800565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a672d10060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fdf05d76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611571573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061159a9190612800565b8a604001516040518363ffffffff1660e01b81526004016115bc92919061262a565b600060405180830381865afa1580156115d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116029190612800565b6040518263ffffffff1660e01b815260040161161e9190612849565b600060405180830381865afa15801561163b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116649190612800565b6040518363ffffffff1660e01b815260040161168192919061262a565b600060405180830381865afa15801561169e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116c79190612800565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832587886040518363ffffffff1660e01b815260040161179f92919061262a565b600060405180830381865afa1580156117bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117e59190612800565b88602001516040518363ffffffff1660e01b815260040161180792919061262a565b600060405180830381865afa158015611824573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061184d9190612800565b86602001516040518363ffffffff1660e01b815260040161186f92919061262a565b600060405180830381865afa15801561188c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118b59190612800565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad8a60200151886040518363ffffffff1660e01b815260040161199192919061262a565b600060405180830381865afa1580156119ae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906119d79190612800565b876040518363ffffffff1660e01b81526004016119f592919061262a565b600060405180830381865afa158015611a12573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a3b9190612800565b87604001516040518363ffffffff1660e01b8152600401611a5d92919061262a565b600060405180830381865afa158015611a7a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611aa39190612800565b9050611aaf8282610c47565b93505050505b919050565b6000600180811115611acf57611ace61214d565b5b83600001516001811115611ae657611ae561214d565b5b148015611b1a5750600180811115611b0157611b0061214d565b5b82600001516001811115611b1857611b1761214d565b5b145b15611b285760019050611ce9565b60006001811115611b3c57611b3b61214d565b5b83600001516001811115611b5357611b5261214d565b5b148015611b88575060006001811115611b6f57611b6e61214d565b5b82600001516001811115611b8657611b8561214d565b5b145b15611ce45760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846020015184602001516040518363ffffffff1660e01b8152600401611bf092919061262a565b602060405180830381865afa158015611c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c319190612676565b8015611cdd575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846040015184604001516040518363ffffffff1660e01b8152600401611c9b92919061262a565b602060405180830381865afa158015611cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdc9190612676565b5b9050611ce9565b600090505b92915050565b604051806060016040528060006001811115611d0e57611d0d61214d565b5b8152602001611d1b611d2e565b8152602001611d28611d2e565b81525090565b6040518060200160405280611d41611d47565b81525090565b604051806060016040528060608152602001600015158152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611dcc82611d83565b810181811067ffffffffffffffff82111715611deb57611dea611d94565b5b80604052505050565b6000611dfe611d6a565b9050611e0a8282611dc3565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611e3957611e38611d94565b5b611e4282611d83565b9050602081019050919050565b82818337600083830152505050565b6000611e71611e6c84611e1e565b611df4565b905082815260208101848484011115611e8d57611e8c611e19565b5b611e98848285611e4f565b509392505050565b600082601f830112611eb557611eb4611e14565b5b8135611ec5848260208601611e5e565b91505092915050565b60008115159050919050565b611ee381611ece565b8114611eee57600080fd5b50565b600081359050611f0081611eda565b92915050565b6000819050919050565b611f1981611f06565b8114611f2457600080fd5b50565b600081359050611f3681611f10565b92915050565b600060608284031215611f5257611f51611d7e565b5b611f5c6060611df4565b9050600082013567ffffffffffffffff811115611f7c57611f7b611e0f565b5b611f8884828501611ea0565b6000830152506020611f9c84828501611ef1565b6020830152506040611fb084828501611f27565b60408301525092915050565b60028110611fc957600080fd5b50565b600081359050611fdb81611fbc565b92915050565b600060208284031215611ff757611ff6611d7e565b5b6120016020611df4565b9050600082013567ffffffffffffffff81111561202157612020611e0f565b5b61202d84828501611f3c565b60008301525092915050565b60006060828403121561204f5761204e611d7e565b5b6120596060611df4565b9050600061206984828501611fcc565b600083015250602082013567ffffffffffffffff81111561208d5761208c611e0f565b5b61209984828501611fe1565b602083015250604082013567ffffffffffffffff8111156120bd576120bc611e0f565b5b6120c984828501611fe1565b60408301525092915050565b600080604083850312156120ec576120eb611d74565b5b600083013567ffffffffffffffff81111561210a57612109611d79565b5b61211685828601611f3c565b925050602083013567ffffffffffffffff81111561213757612136611d79565b5b61214385828601612039565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061218d5761218c61214d565b5b50565b600081905061219e8261217c565b919050565b60006121ae82612190565b9050919050565b6121be816121a3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121fe5780820151818401526020810190506121e3565b60008484015250505050565b6000612215826121c4565b61221f81856121cf565b935061222f8185602086016121e0565b61223881611d83565b840191505092915050565b61224c81611ece565b82525050565b61225b81611f06565b82525050565b6000606083016000830151848203600086015261227e828261220a565b91505060208301516122936020860182612243565b5060408301516122a66040860182612252565b508091505092915050565b600060208301600083015184820360008601526122ce8282612261565b9150508091505092915050565b60006060830160008301516122f360008601826121b5565b506020830151848203602086015261230b82826122b1565b9150506040830151848203604086015261232582826122b1565b9150508091505092915050565b6000602082019050818103600083015261234c81846122db565b905092915050565b6000806040838503121561236b5761236a611d74565b5b600083013567ffffffffffffffff81111561238957612388611d79565b5b61239585828601612039565b925050602083013567ffffffffffffffff8111156123b6576123b5611d79565b5b6123c285828601612039565b9150509250929050565b600080604083850312156123e3576123e2611d74565b5b600083013567ffffffffffffffff81111561240157612400611d79565b5b61240d85828601611fe1565b925050602083013567ffffffffffffffff81111561242e5761242d611d79565b5b61243a85828601611fe1565b9150509250929050565b60006020828403121561245a57612459611d74565b5b600082013567ffffffffffffffff81111561247857612477611d79565b5b61248484828501611f3c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006124c58383612243565b60208301905092915050565b6000602082019050919050565b60006124e98261248d565b6124f38185612498565b93506124fe836124a9565b8060005b8381101561252f57815161251688826124b9565b9750612521836124d1565b925050600181019050612502565b5085935050505092915050565b6000602082019050818103600083015261255681846124de565b905092915050565b60006020828403121561257457612573611d74565b5b600082013567ffffffffffffffff81111561259257612591611d79565b5b61259e84828501612039565b91505092915050565b6125b081611ece565b82525050565b60006020820190506125cb60008301846125a7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602083016000830151848203600086015261261d8282612261565b9150508091505092915050565b600060408201905081810360008301526126448185612600565b905081810360208301526126588184612600565b90509392505050565b60008151905061267081611eda565b92915050565b60006020828403121561268c5761268b611d74565b5b600061269a84828501612661565b91505092915050565b60006126b66126b184611e1e565b611df4565b9050828152602081018484840111156126d2576126d1611e19565b5b6126dd8482856121e0565b509392505050565b600082601f8301126126fa576126f9611e14565b5b815161270a8482602086016126a3565b91505092915050565b60008151905061272281611f10565b92915050565b60006060828403121561273e5761273d611d7e565b5b6127486060611df4565b9050600082015167ffffffffffffffff81111561276857612767611e0f565b5b612774848285016126e5565b600083015250602061278884828501612661565b602083015250604061279c84828501612713565b60408301525092915050565b6000602082840312156127be576127bd611d7e565b5b6127c86020611df4565b9050600082015167ffffffffffffffff8111156127e8576127e7611e0f565b5b6127f484828501612728565b60008301525092915050565b60006020828403121561281657612815611d74565b5b600082015167ffffffffffffffff81111561283457612833611d79565b5b612840848285016127a8565b91505092915050565b600060208201905081810360008301526128638184612600565b905092915050565b60006020828403121561288157612880611d74565b5b600082015167ffffffffffffffff81111561289f5761289e611d79565b5b6128ab84828501612728565b91505092915050565b600082825260208201905092915050565b60006128d0826121c4565b6128da81856128b4565b93506128ea8185602086016121e0565b6128f381611d83565b840191505092915050565b61290781611ece565b82525050565b61291681611f06565b82525050565b6000606083016000830151848203600086015261293982826128c5565b915050602083015161294e60208601826128fe565b506040830151612961604086018261290d565b508091505092915050565b60006040820190508181036000830152612986818561291c565b9050818103602083015261299a818461291c565b90509392505050565b600060208201905081810360008301526129bd818461291c565b905092915050565b6000819050919050565b6000819050919050565b60006129f46129ef6129ea846129c5565b6129cf565b611f06565b9050919050565b612a04816129d9565b82525050565b60006040820190508181036000830152612a24818561291c565b9050612a3360208301846129fb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a7482611f06565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612aa657612aa5612a3a565b5b600182019050919050565b6000612abc82611f06565b9150612ac783611f06565b9250828203905081811115612adf57612ade612a3a565b5b9291505056fea264697066735822122054bdd3f727ee695fd6673d1b069c0d697629391c2955d76d9c863fe254d7bc1a64736f6c634300081b0033";

type PointZpConstructorParams =
  | [linkLibraryAddresses: PointZpLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PointZpConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class PointZp__factory extends ContractFactory {
  constructor(...args: PointZpConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, PointZp__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: PointZpLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$7db5d2dbc3ae63372df6c39d501ad0f72a\\$__", "g"),
      linkLibraryAddresses["contracts/BigNumber.sol:BigNumbers"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    field: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(field, overrides || {});
  }
  override deploy(
    field: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(field, overrides || {}) as Promise<
      PointZp & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PointZp__factory {
    return super.connect(runner) as PointZp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PointZpInterface {
    return new Interface(_abi) as PointZpInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PointZp {
    return new Contract(address, _abi, runner) as unknown as PointZp;
  }
}

export interface PointZpLibraryAddresses {
  ["contracts/BigNumber.sol:BigNumbers"]: string;
}
