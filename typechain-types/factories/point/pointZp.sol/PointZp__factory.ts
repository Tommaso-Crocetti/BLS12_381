/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  PointZp,
  PointZpInterface,
} from "../../../point/pointZp.sol/PointZp";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract BigFiniteField",
        name: "field",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "other",
        type: "tuple",
      },
    ],
    name: "add",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "b",
        type: "tuple",
      },
    ],
    name: "compare",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
    ],
    name: "double",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "val",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "neg",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "bitlen",
            type: "uint256",
          },
        ],
        internalType: "struct BigNumber",
        name: "k",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
    ],
    name: "multiply",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "val",
                type: "bytes",
              },
              {
                internalType: "bool",
                name: "neg",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "bitlen",
                type: "uint256",
              },
            ],
            internalType: "struct BigNumber",
            name: "value",
            type: "tuple",
          },
        ],
        internalType: "struct Zp",
        name: "x",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "val",
                type: "bytes",
              },
              {
                internalType: "bool",
                name: "neg",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "bitlen",
                type: "uint256",
              },
            ],
            internalType: "struct BigNumber",
            name: "value",
            type: "tuple",
          },
        ],
        internalType: "struct Zp",
        name: "y",
        type: "tuple",
      },
    ],
    name: "newPoint",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "point_at_infinity",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051612785380380612785833981810160405281019061003291906100ed565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b60006100ba8261009d565b9050919050565b6100ca816100af565b81146100d557600080fd5b50565b6000815190506100e7816100c1565b92915050565b60006020828403121561010357610102610078565b5b6000610111848285016100d8565b91505092915050565b61265c806101296000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c80627995931461006657806307951d69146100965780631953a9bf146100c6578063292310eb146100f65780636cee5a0b14610114578063899c229814610144575b600080fd5b610080600480360381019061007b9190611dbf565b610174565b60405161008d919061201c565b60405180910390f35b6100b060048036038101906100ab919061203e565b6102aa565b6040516100bd919061201c565b60405180910390f35b6100e060048036038101906100db91906120b6565b610c70565b6040516100ed919061201c565b60405180910390f35b6100fe610cae565b60405161010b919061201c565b60405180910390f35b61012e6004803603810190610129919061212e565b610e0e565b60405161013b919061201c565b60405180910390f35b61015e6004803603810190610159919061203e565b6117a4565b60405161016b9190612186565b60405180910390f35b61017c6119d9565b60001515836020015115151461019157600080fd5b600061019b610cae565b90506000839050600073__$861e165b3789503b1dee5f6def1855c9ef$__63d57f6fe7876040518263ffffffff1660e01b81526004016101db9190612259565b600060405180830381865af41580156101f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102219190612358565b905080600081518110610237576102366123a1565b5b602002602001015115610248578192505b6000600190505b815181101561029d5761026183610e0e565b9250818181518110610276576102756123a1565b5b6020026020010151156102905761028d84846102aa565b93505b808060010191505061024f565b5082935050505092915050565b6102b26119d9565b6001808111156102c5576102c4611e37565b5b836000015160018111156102dc576102db611e37565b5b036102e957819050610c6a565b6001808111156102fc576102fb611e37565b5b8260000151600181111561031357610312611e37565b5b0361032057829050610c6a565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846020015184602001516040518363ffffffff1660e01b81526004016103839291906123fa565b602060405180830381865afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190612431565b8015610470575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846040015184604001516040518363ffffffff1660e01b815260040161042e9291906123fa565b602060405180830381865afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190612431565b5b156104855761047e83610e0e565b9050610c6a565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846020015184602001516040518363ffffffff1660e01b81526004016104e89291906123fa565b602060405180830381865afa158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190612431565b80156105d6575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846040015184604001516040518363ffffffff1660e01b81526004016105939291906123fa565b602060405180830381865afa1580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190612431565b155b156105ea576105e3610cae565b9050610c6a565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad866040015188604001516040518363ffffffff1660e01b815260040161068c9291906123fa565b600060405180830381865afa1580156106a9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106d291906125bb565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a672d10060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad89602001518b602001516040518363ffffffff1660e01b81526004016107719291906123fa565b600060405180830381865afa15801561078e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107b791906125bb565b6040518263ffffffff1660e01b81526004016107d39190612604565b600060405180830381865afa1580156107f0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061081991906125bb565b6040518363ffffffff1660e01b81526004016108369291906123fa565b600060405180830381865afa158015610853573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061087c91906125bb565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832587886040518363ffffffff1660e01b81526004016109549291906123fa565b600060405180830381865afa158015610971573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061099a91906125bb565b89602001516040518363ffffffff1660e01b81526004016109bc9291906123fa565b600060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a0291906125bb565b86602001516040518363ffffffff1660e01b8152600401610a249291906123fa565b600060405180830381865afa158015610a41573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a6a91906125bb565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad8b60200151886040518363ffffffff1660e01b8152600401610b469291906123fa565b600060405180830381865afa158015610b63573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b8c91906125bb565b876040518363ffffffff1660e01b8152600401610baa9291906123fa565b600060405180830381865afa158015610bc7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bf091906125bb565b88604001516040518363ffffffff1660e01b8152600401610c129291906123fa565b600060405180830381865afa158015610c2f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c5891906125bb565b9050610c648282610c70565b93505050505b92915050565b610c786119d9565b604051806060016040528060006001811115610c9757610c96611e37565b5b815260200184815260200183815250905092915050565b610cb66119d9565b6040518060600160405280600180811115610cd457610cd3611e37565b5b815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d44573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d6d91906125bb565b815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ddd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e0691906125bb565b815250905090565b610e166119d9565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554836040015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ec2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610eeb91906125bb565b6040518363ffffffff1660e01b8152600401610f089291906123fa565b602060405180830381865afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190612431565b15610f5d57610f56610cae565b905061179f565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345caa1176040518163ffffffff1660e01b8152600401600060405180830381865afa158015611043573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061106c91906125bb565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832589602001518a602001516040518363ffffffff1660e01b81526004016110cf9291906123fa565b600060405180830381865afa1580156110ec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061111591906125bb565b6040518363ffffffff1660e01b81526004016111329291906123fa565b600060405180830381865afa15801561114f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061117891906125bb565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a672d10060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fdf05d76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561125b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061128491906125bb565b8a604001516040518363ffffffff1660e01b81526004016112a69291906123fa565b600060405180830381865afa1580156112c3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112ec91906125bb565b6040518263ffffffff1660e01b81526004016113089190612604565b600060405180830381865afa158015611325573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061134e91906125bb565b6040518363ffffffff1660e01b815260040161136b9291906123fa565b600060405180830381865afa158015611388573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113b191906125bb565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832587886040518363ffffffff1660e01b81526004016114899291906123fa565b600060405180830381865afa1580156114a6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114cf91906125bb565b88602001516040518363ffffffff1660e01b81526004016114f19291906123fa565b600060405180830381865afa15801561150e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061153791906125bb565b86602001516040518363ffffffff1660e01b81526004016115599291906123fa565b600060405180830381865afa158015611576573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061159f91906125bb565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad8a60200151886040518363ffffffff1660e01b815260040161167b9291906123fa565b600060405180830381865afa158015611698573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116c191906125bb565b876040518363ffffffff1660e01b81526004016116df9291906123fa565b600060405180830381865afa1580156116fc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061172591906125bb565b87604001516040518363ffffffff1660e01b81526004016117479291906123fa565b600060405180830381865afa158015611764573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061178d91906125bb565b90506117998282610c70565b93505050505b919050565b60006001808111156117b9576117b8611e37565b5b836000015160018111156117d0576117cf611e37565b5b14801561180457506001808111156117eb576117ea611e37565b5b8260000151600181111561180257611801611e37565b5b145b1561181257600190506119d3565b6000600181111561182657611825611e37565b5b8360000151600181111561183d5761183c611e37565b5b14801561187257506000600181111561185957611858611e37565b5b826000015160018111156118705761186f611e37565b5b145b156119ce5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846020015184602001516040518363ffffffff1660e01b81526004016118da9291906123fa565b602060405180830381865afa1580156118f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191b9190612431565b80156119c7575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846040015184604001516040518363ffffffff1660e01b81526004016119859291906123fa565b602060405180830381865afa1580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c69190612431565b5b90506119d3565b600090505b92915050565b6040518060600160405280600060018111156119f8576119f7611e37565b5b8152602001611a05611a18565b8152602001611a12611a18565b81525090565b6040518060200160405280611a2b611a31565b81525090565b604051806060016040528060608152602001600015158152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ab682611a6d565b810181811067ffffffffffffffff82111715611ad557611ad4611a7e565b5b80604052505050565b6000611ae8611a54565b9050611af48282611aad565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611b2357611b22611a7e565b5b611b2c82611a6d565b9050602081019050919050565b82818337600083830152505050565b6000611b5b611b5684611b08565b611ade565b905082815260208101848484011115611b7757611b76611b03565b5b611b82848285611b39565b509392505050565b600082601f830112611b9f57611b9e611afe565b5b8135611baf848260208601611b48565b91505092915050565b60008115159050919050565b611bcd81611bb8565b8114611bd857600080fd5b50565b600081359050611bea81611bc4565b92915050565b6000819050919050565b611c0381611bf0565b8114611c0e57600080fd5b50565b600081359050611c2081611bfa565b92915050565b600060608284031215611c3c57611c3b611a68565b5b611c466060611ade565b9050600082013567ffffffffffffffff811115611c6657611c65611af9565b5b611c7284828501611b8a565b6000830152506020611c8684828501611bdb565b6020830152506040611c9a84828501611c11565b60408301525092915050565b60028110611cb357600080fd5b50565b600081359050611cc581611ca6565b92915050565b600060208284031215611ce157611ce0611a68565b5b611ceb6020611ade565b9050600082013567ffffffffffffffff811115611d0b57611d0a611af9565b5b611d1784828501611c26565b60008301525092915050565b600060608284031215611d3957611d38611a68565b5b611d436060611ade565b90506000611d5384828501611cb6565b600083015250602082013567ffffffffffffffff811115611d7757611d76611af9565b5b611d8384828501611ccb565b602083015250604082013567ffffffffffffffff811115611da757611da6611af9565b5b611db384828501611ccb565b60408301525092915050565b60008060408385031215611dd657611dd5611a5e565b5b600083013567ffffffffffffffff811115611df457611df3611a63565b5b611e0085828601611c26565b925050602083013567ffffffffffffffff811115611e2157611e20611a63565b5b611e2d85828601611d23565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611e7757611e76611e37565b5b50565b6000819050611e8882611e66565b919050565b6000611e9882611e7a565b9050919050565b611ea881611e8d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ee8578082015181840152602081019050611ecd565b60008484015250505050565b6000611eff82611eae565b611f098185611eb9565b9350611f19818560208601611eca565b611f2281611a6d565b840191505092915050565b611f3681611bb8565b82525050565b611f4581611bf0565b82525050565b60006060830160008301518482036000860152611f688282611ef4565b9150506020830151611f7d6020860182611f2d565b506040830151611f906040860182611f3c565b508091505092915050565b60006020830160008301518482036000860152611fb88282611f4b565b9150508091505092915050565b6000606083016000830151611fdd6000860182611e9f565b5060208301518482036020860152611ff58282611f9b565b9150506040830151848203604086015261200f8282611f9b565b9150508091505092915050565b600060208201905081810360008301526120368184611fc5565b905092915050565b6000806040838503121561205557612054611a5e565b5b600083013567ffffffffffffffff81111561207357612072611a63565b5b61207f85828601611d23565b925050602083013567ffffffffffffffff8111156120a05761209f611a63565b5b6120ac85828601611d23565b9150509250929050565b600080604083850312156120cd576120cc611a5e565b5b600083013567ffffffffffffffff8111156120eb576120ea611a63565b5b6120f785828601611ccb565b925050602083013567ffffffffffffffff81111561211857612117611a63565b5b61212485828601611ccb565b9150509250929050565b60006020828403121561214457612143611a5e565b5b600082013567ffffffffffffffff81111561216257612161611a63565b5b61216e84828501611d23565b91505092915050565b61218081611bb8565b82525050565b600060208201905061219b6000830184612177565b92915050565b600082825260208201905092915050565b60006121bd82611eae565b6121c781856121a1565b93506121d7818560208601611eca565b6121e081611a6d565b840191505092915050565b6121f481611bb8565b82525050565b61220381611bf0565b82525050565b6000606083016000830151848203600086015261222682826121b2565b915050602083015161223b60208601826121eb565b50604083015161224e60408601826121fa565b508091505092915050565b600060208201905081810360008301526122738184612209565b905092915050565b600067ffffffffffffffff82111561229657612295611a7e565b5b602082029050602081019050919050565b600080fd5b6000815190506122bb81611bc4565b92915050565b60006122d46122cf8461227b565b611ade565b905080838252602082019050602084028301858111156122f7576122f66122a7565b5b835b81811015612320578061230c88826122ac565b8452602084019350506020810190506122f9565b5050509392505050565b600082601f83011261233f5761233e611afe565b5b815161234f8482602086016122c1565b91505092915050565b60006020828403121561236e5761236d611a5e565b5b600082015167ffffffffffffffff81111561238c5761238b611a63565b5b6123988482850161232a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208301600083015184820360008601526123ed8282611f4b565b9150508091505092915050565b6000604082019050818103600083015261241481856123d0565b9050818103602083015261242881846123d0565b90509392505050565b60006020828403121561244757612446611a5e565b5b6000612455848285016122ac565b91505092915050565b600061247161246c84611b08565b611ade565b90508281526020810184848401111561248d5761248c611b03565b5b612498848285611eca565b509392505050565b600082601f8301126124b5576124b4611afe565b5b81516124c584826020860161245e565b91505092915050565b6000815190506124dd81611bfa565b92915050565b6000606082840312156124f9576124f8611a68565b5b6125036060611ade565b9050600082015167ffffffffffffffff81111561252357612522611af9565b5b61252f848285016124a0565b6000830152506020612543848285016122ac565b6020830152506040612557848285016124ce565b60408301525092915050565b60006020828403121561257957612578611a68565b5b6125836020611ade565b9050600082015167ffffffffffffffff8111156125a3576125a2611af9565b5b6125af848285016124e3565b60008301525092915050565b6000602082840312156125d1576125d0611a5e565b5b600082015167ffffffffffffffff8111156125ef576125ee611a63565b5b6125fb84828501612563565b91505092915050565b6000602082019050818103600083015261261e81846123d0565b90509291505056fea26469706673582212206288c9a39925407300d931d747aeac184ae25f08f669334ffbb4d7c1cbc3e98964736f6c634300081b0033";

type PointZpConstructorParams =
  | [linkLibraryAddresses: PointZpLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PointZpConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class PointZp__factory extends ContractFactory {
  constructor(...args: PointZpConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, PointZp__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: PointZpLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$861e165b3789503b1dee5f6def1855c9ef\\$__", "g"),
      linkLibraryAddresses["contracts/lib/GetBits.sol:GetBits"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    field: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(field, overrides || {});
  }
  override deploy(
    field: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(field, overrides || {}) as Promise<
      PointZp & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PointZp__factory {
    return super.connect(runner) as PointZp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PointZpInterface {
    return new Interface(_abi) as PointZpInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PointZp {
    return new Contract(address, _abi, runner) as unknown as PointZp;
  }
}

export interface PointZpLibraryAddresses {
  ["contracts/lib/GetBits.sol:GetBits"]: string;
}
