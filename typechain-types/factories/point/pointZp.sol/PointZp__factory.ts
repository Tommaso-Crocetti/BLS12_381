/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  PointZp,
  PointZpInterface,
} from "../../../point/pointZp.sol/PointZp";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract BigFiniteField",
        name: "field",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "other",
        type: "tuple",
      },
    ],
    name: "add",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
    ],
    name: "double",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "val",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "neg",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "bitlen",
            type: "uint256",
          },
        ],
        internalType: "struct BigNumber",
        name: "k",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
    ],
    name: "multiply",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "self",
        type: "tuple",
      },
    ],
    name: "negate",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum PointType",
        name: "pointType",
        type: "uint8",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "val",
                type: "bytes",
              },
              {
                internalType: "bool",
                name: "neg",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "bitlen",
                type: "uint256",
              },
            ],
            internalType: "struct BigNumber",
            name: "value",
            type: "tuple",
          },
        ],
        internalType: "struct Zp",
        name: "x",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "val",
                type: "bytes",
              },
              {
                internalType: "bool",
                name: "neg",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "bitlen",
                type: "uint256",
              },
            ],
            internalType: "struct BigNumber",
            name: "value",
            type: "tuple",
          },
        ],
        internalType: "struct Zp",
        name: "y",
        type: "tuple",
      },
    ],
    name: "newPoint",
    outputs: [
      {
        components: [
          {
            internalType: "enum PointType",
            name: "pointType",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "x",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes",
                    name: "val",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "neg",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "bitlen",
                    type: "uint256",
                  },
                ],
                internalType: "struct BigNumber",
                name: "value",
                type: "tuple",
              },
            ],
            internalType: "struct Zp",
            name: "y",
            type: "tuple",
          },
        ],
        internalType: "struct Point_Zp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051612cd8380380612cd8833981810160405281019061003291906100ed565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b60006100ba8261009d565b9050919050565b6100ca816100af565b81146100d557600080fd5b50565b6000815190506100e7816100c1565b92915050565b60006020828403121561010357610102610078565b5b6000610111848285016100d8565b91505092915050565b612baf806101296000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c80627995931461005b57806307951d691461008b5780633e072985146100bb5780636cee5a0b146100eb57806398dc089a1461011b575b600080fd5b61007560048036038101906100709190612217565b61014b565b6040516100829190612474565b60405180910390f35b6100a560048036038101906100a09190612496565b6103bf565b6040516100b29190612474565b60405180910390f35b6100d560048036038101906100d0919061250e565b610eb1565b6040516100e29190612474565b60405180910390f35b61010560048036038101906101009190612599565b610eef565b6040516101129190612474565b60405180910390f35b61013560048036038101906101309190612599565b6119b1565b6040516101429190612474565b60405180910390f35b610153611e31565b6000610287600160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101c5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101ee9190612754565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610259573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102829190612754565b610eb1565b905083602001516102a55761029d848483611b71565b9150506103b9565b6103b573__$7db5d2dbc3ae63372df6c39d501ad0f72a$__63b1d74ee98673__$7db5d2dbc3ae63372df6c39d501ad0f72a$__6340957f726001806040518363ffffffff1660e01b81526004016102fd9291906127f1565b600060405180830381865af415801561031a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610343919061281a565b6040518363ffffffff1660e01b815260040161036092919061291b565b600060405180830381865af415801561037d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103a6919061281a565b6103af856119b1565b83611b71565b9150505b92915050565b6103c7611e31565b6001808111156103da576103d961228f565b5b836000015160018111156103f1576103f061228f565b5b036103fe57819050610eab565b6001808111156104115761041061228f565b5b826000015160018111156104285761042761228f565b5b0361043557829050610eab565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846020015184602001516040518363ffffffff1660e01b815260040161049892919061297c565b602060405180830381865afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d991906129b3565b8015610585575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846040015184604001516040518363ffffffff1660e01b815260040161054392919061297c565b602060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058491906129b3565b5b1561059a5761059383610eef565b9050610eab565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846020015184602001516040518363ffffffff1660e01b81526004016105fd92919061297c565b602060405180830381865afa15801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e91906129b3565b80156106eb575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554846040015184604001516040518363ffffffff1660e01b81526004016106a892919061297c565b602060405180830381865afa1580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e991906129b3565b155b1561082957610822600160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610760573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107899190612754565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107f4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061081d9190612754565b610eb1565b9050610eab565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad866040015188604001516040518363ffffffff1660e01b81526004016108cb92919061297c565b600060405180830381865afa1580156108e8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109119190612754565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a672d10060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad89602001518b602001516040518363ffffffff1660e01b81526004016109b092919061297c565b600060405180830381865afa1580156109cd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109f69190612754565b6040518263ffffffff1660e01b8152600401610a1291906129e0565b600060405180830381865afa158015610a2f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a589190612754565b6040518363ffffffff1660e01b8152600401610a7592919061297c565b600060405180830381865afa158015610a92573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610abb9190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832587886040518363ffffffff1660e01b8152600401610b9392919061297c565b600060405180830381865afa158015610bb0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bd99190612754565b89602001516040518363ffffffff1660e01b8152600401610bfb92919061297c565b600060405180830381865afa158015610c18573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c419190612754565b86602001516040518363ffffffff1660e01b8152600401610c6392919061297c565b600060405180830381865afa158015610c80573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ca99190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad8b60200151886040518363ffffffff1660e01b8152600401610d8592919061297c565b600060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dcb9190612754565b876040518363ffffffff1660e01b8152600401610de992919061297c565b600060405180830381865afa158015610e06573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e2f9190612754565b88604001516040518363ffffffff1660e01b8152600401610e5192919061297c565b600060405180830381865afa158015610e6e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e979190612754565b9050610ea560008383610eb1565b93505050505b92915050565b610eb9611e31565b6040518060600160405280856001811115610ed757610ed661228f565b5b81526020018481526020018381525090509392505050565b610ef7611e31565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d45554836040015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fa3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610fcc9190612754565b6040518363ffffffff1660e01b8152600401610fe992919061297c565b602060405180830381865afa158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a91906129b3565b1561116857611161600160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110c89190612754565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611133573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061115c9190612754565b610eb1565b90506119ac565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345caa1176040518163ffffffff1660e01b8152600401600060405180830381865afa15801561124e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112779190612754565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832589602001518a602001516040518363ffffffff1660e01b81526004016112da92919061297c565b600060405180830381865afa1580156112f7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113209190612754565b6040518363ffffffff1660e01b815260040161133d92919061297c565b600060405180830381865afa15801561135a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113839190612754565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a672d10060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fdf05d76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611466573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061148f9190612754565b8a604001516040518363ffffffff1660e01b81526004016114b192919061297c565b600060405180830381865afa1580156114ce573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114f79190612754565b6040518263ffffffff1660e01b815260040161151391906129e0565b600060405180830381865afa158015611530573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906115599190612754565b6040518363ffffffff1660e01b815260040161157692919061297c565b600060405180830381865afa158015611593573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906115bc9190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832587886040518363ffffffff1660e01b815260040161169492919061297c565b600060405180830381865afa1580156116b1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116da9190612754565b88602001516040518363ffffffff1660e01b81526004016116fc92919061297c565b600060405180830381865afa158015611719573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117429190612754565b86602001516040518363ffffffff1660e01b815260040161176492919061297c565b600060405180830381865afa158015611781573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117aa9190612754565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e2832560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad8a60200151886040518363ffffffff1660e01b815260040161188692919061297c565b600060405180830381865afa1580156118a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118cc9190612754565b876040518363ffffffff1660e01b81526004016118ea92919061297c565b600060405180830381865afa158015611907573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906119309190612754565b87604001516040518363ffffffff1660e01b815260040161195292919061297c565b600060405180830381865afa15801561196f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906119989190612754565b90506119a660008383610eb1565b93505050505b919050565b6119b9611e31565b6001808111156119cc576119cb61228f565b5b826000015160018111156119e3576119e261228f565b5b03611a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1a90612a5f565b60405180910390fd5b611b6a6000836020015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb2bedad60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611ad4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611afd9190612754565b87604001516040518363ffffffff1660e01b8152600401611b1f92919061297c565b600060405180830381865afa158015611b3c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b659190612754565b610eb1565b9050919050565b611b79611e31565b600073__$7db5d2dbc3ae63372df6c39d501ad0f72a$__63bc39804e8673__$7db5d2dbc3ae63372df6c39d501ad0f72a$__63bc1b392d6040518163ffffffff1660e01b8152600401600060405180830381865af4158015611bdf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611c08919061281a565b60006040518463ffffffff1660e01b8152600401611c2893929190612a7f565b602060405180830381865af4158015611c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c699190612afa565b03611c7657819050611e2a565b73__$7db5d2dbc3ae63372df6c39d501ad0f72a$__63ee4a4e4e856040518263ffffffff1660e01b8152600401611cad9190612b27565b602060405180830381865af4158015611cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cee91906129b3565b15611d9557611d8e73__$7db5d2dbc3ae63372df6c39d501ad0f72a$__636efac6c78660016040518363ffffffff1660e01b8152600401611d30929190612b49565b600060405180830381865af4158015611d4d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611d76919061281a565b611d7f85610eef565b611d8985876103bf565b611b71565b9050611e2a565b611e2773__$7db5d2dbc3ae63372df6c39d501ad0f72a$__636efac6c78660016040518363ffffffff1660e01b8152600401611dd2929190612b49565b600060405180830381865af4158015611def573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e18919061281a565b611e2185610eef565b84611b71565b90505b9392505050565b604051806060016040528060006001811115611e5057611e4f61228f565b5b8152602001611e5d611e70565b8152602001611e6a611e70565b81525090565b6040518060200160405280611e83611e89565b81525090565b604051806060016040528060608152602001600015158152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f0e82611ec5565b810181811067ffffffffffffffff82111715611f2d57611f2c611ed6565b5b80604052505050565b6000611f40611eac565b9050611f4c8282611f05565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611f7b57611f7a611ed6565b5b611f8482611ec5565b9050602081019050919050565b82818337600083830152505050565b6000611fb3611fae84611f60565b611f36565b905082815260208101848484011115611fcf57611fce611f5b565b5b611fda848285611f91565b509392505050565b600082601f830112611ff757611ff6611f56565b5b8135612007848260208601611fa0565b91505092915050565b60008115159050919050565b61202581612010565b811461203057600080fd5b50565b6000813590506120428161201c565b92915050565b6000819050919050565b61205b81612048565b811461206657600080fd5b50565b60008135905061207881612052565b92915050565b60006060828403121561209457612093611ec0565b5b61209e6060611f36565b9050600082013567ffffffffffffffff8111156120be576120bd611f51565b5b6120ca84828501611fe2565b60008301525060206120de84828501612033565b60208301525060406120f284828501612069565b60408301525092915050565b6002811061210b57600080fd5b50565b60008135905061211d816120fe565b92915050565b60006020828403121561213957612138611ec0565b5b6121436020611f36565b9050600082013567ffffffffffffffff81111561216357612162611f51565b5b61216f8482850161207e565b60008301525092915050565b60006060828403121561219157612190611ec0565b5b61219b6060611f36565b905060006121ab8482850161210e565b600083015250602082013567ffffffffffffffff8111156121cf576121ce611f51565b5b6121db84828501612123565b602083015250604082013567ffffffffffffffff8111156121ff576121fe611f51565b5b61220b84828501612123565b60408301525092915050565b6000806040838503121561222e5761222d611eb6565b5b600083013567ffffffffffffffff81111561224c5761224b611ebb565b5b6122588582860161207e565b925050602083013567ffffffffffffffff81111561227957612278611ebb565b5b6122858582860161217b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106122cf576122ce61228f565b5b50565b60008190506122e0826122be565b919050565b60006122f0826122d2565b9050919050565b612300816122e5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612340578082015181840152602081019050612325565b60008484015250505050565b600061235782612306565b6123618185612311565b9350612371818560208601612322565b61237a81611ec5565b840191505092915050565b61238e81612010565b82525050565b61239d81612048565b82525050565b600060608301600083015184820360008601526123c0828261234c565b91505060208301516123d56020860182612385565b5060408301516123e86040860182612394565b508091505092915050565b6000602083016000830151848203600086015261241082826123a3565b9150508091505092915050565b600060608301600083015161243560008601826122f7565b506020830151848203602086015261244d82826123f3565b9150506040830151848203604086015261246782826123f3565b9150508091505092915050565b6000602082019050818103600083015261248e818461241d565b905092915050565b600080604083850312156124ad576124ac611eb6565b5b600083013567ffffffffffffffff8111156124cb576124ca611ebb565b5b6124d78582860161217b565b925050602083013567ffffffffffffffff8111156124f8576124f7611ebb565b5b6125048582860161217b565b9150509250929050565b60008060006060848603121561252757612526611eb6565b5b60006125358682870161210e565b935050602084013567ffffffffffffffff81111561255657612555611ebb565b5b61256286828701612123565b925050604084013567ffffffffffffffff81111561258357612582611ebb565b5b61258f86828701612123565b9150509250925092565b6000602082840312156125af576125ae611eb6565b5b600082013567ffffffffffffffff8111156125cd576125cc611ebb565b5b6125d98482850161217b565b91505092915050565b60006125f56125f084611f60565b611f36565b90508281526020810184848401111561261157612610611f5b565b5b61261c848285612322565b509392505050565b600082601f83011261263957612638611f56565b5b81516126498482602086016125e2565b91505092915050565b6000815190506126618161201c565b92915050565b60008151905061267681612052565b92915050565b60006060828403121561269257612691611ec0565b5b61269c6060611f36565b9050600082015167ffffffffffffffff8111156126bc576126bb611f51565b5b6126c884828501612624565b60008301525060206126dc84828501612652565b60208301525060406126f084828501612667565b60408301525092915050565b60006020828403121561271257612711611ec0565b5b61271c6020611f36565b9050600082015167ffffffffffffffff81111561273c5761273b611f51565b5b6127488482850161267c565b60008301525092915050565b60006020828403121561276a57612769611eb6565b5b600082015167ffffffffffffffff81111561278857612787611ebb565b5b612794848285016126fc565b91505092915050565b6000819050919050565b6000819050919050565b60006127cc6127c76127c28461279d565b6127a7565b612048565b9050919050565b6127dc816127b1565b82525050565b6127eb81612010565b82525050565b600060408201905061280660008301856127d3565b61281360208301846127e2565b9392505050565b6000602082840312156128305761282f611eb6565b5b600082015167ffffffffffffffff81111561284e5761284d611ebb565b5b61285a8482850161267c565b91505092915050565b600082825260208201905092915050565b600061287f82612306565b6128898185612863565b9350612899818560208601612322565b6128a281611ec5565b840191505092915050565b6128b681612010565b82525050565b6128c581612048565b82525050565b600060608301600083015184820360008601526128e88282612874565b91505060208301516128fd60208601826128ad565b50604083015161291060408601826128bc565b508091505092915050565b6000604082019050818103600083015261293581856128cb565b9050818103602083015261294981846128cb565b90509392505050565b6000602083016000830151848203600086015261296f82826123a3565b9150508091505092915050565b600060408201905081810360008301526129968185612952565b905081810360208301526129aa8184612952565b90509392505050565b6000602082840312156129c9576129c8611eb6565b5b60006129d784828501612652565b91505092915050565b600060208201905081810360008301526129fa8184612952565b905092915050565b600082825260208201905092915050565b7f63616e6e6f74206e656761746520706f696e7420617420696e66696e69747900600082015250565b6000612a49601f83612a02565b9150612a5482612a13565b602082019050919050565b60006020820190508181036000830152612a7881612a3c565b9050919050565b60006060820190508181036000830152612a9981866128cb565b90508181036020830152612aad81856128cb565b9050612abc60408301846127e2565b949350505050565b6000819050919050565b612ad781612ac4565b8114612ae257600080fd5b50565b600081519050612af481612ace565b92915050565b600060208284031215612b1057612b0f611eb6565b5b6000612b1e84828501612ae5565b91505092915050565b60006020820190508181036000830152612b4181846128cb565b905092915050565b60006040820190508181036000830152612b6381856128cb565b9050612b7260208301846127d3565b939250505056fea2646970667358221220c02e71ba8899cfa909e2bb1fe1df7a341aad905d5df83f477c996a561705d70564736f6c634300081b0033";

type PointZpConstructorParams =
  | [linkLibraryAddresses: PointZpLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PointZpConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class PointZp__factory extends ContractFactory {
  constructor(...args: PointZpConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, PointZp__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: PointZpLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$7db5d2dbc3ae63372df6c39d501ad0f72a\\$__", "g"),
      linkLibraryAddresses["contracts/BigNumber.sol:BigNumbers"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    field: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(field, overrides || {});
  }
  override deploy(
    field: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(field, overrides || {}) as Promise<
      PointZp & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PointZp__factory {
    return super.connect(runner) as PointZp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PointZpInterface {
    return new Interface(_abi) as PointZpInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PointZp {
    return new Contract(address, _abi, runner) as unknown as PointZp;
  }
}

export interface PointZpLibraryAddresses {
  ["contracts/BigNumber.sol:BigNumbers"]: string;
}
